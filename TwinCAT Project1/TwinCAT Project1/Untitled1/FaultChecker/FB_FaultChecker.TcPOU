<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="FB_FaultChecker" Id="{81627131-cc2a-4f8a-9243-c943820076da}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_FaultChecker
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR_IN_OUT
    //aFaultsToCheck  : ARRAY [*] OF POINTER TO FB_FaultEvent;
	
END_VAR
VAR CONSTANT
	//Constants as defined in Pulse Pisa Manuals
    MAX_FAULTS : USINT            := 255;     
END_VAR

VAR
	
aFaultsToCheck : ARRAY[0..MAX_FAULTS] OF POINTER TO FB_EventTrigger;
	//aFaultsToCheck  : ARRAY [255] OF POINTER TO FB_FaultEvent;
	nIdx   : DINT;
    nSum   : DINT;
	nWriteIndex :UINT:=0;
	nLastWriteIndex:UINT:=0;
	
	
	//aFaultsToCheck : ARRAY[1..MAX_NUMBER_OF_CHANNELS] OF CircuitBreakerStatus := [MAX_NUMBER_OF_CHANNELS(CircuitBreakerStatus.UNKNOWN)]; 
	fbFaultChecker: INT;
	bTest: BOOL :=FALSE;
	bFlag : BOOL;
	timerDelay : TOF;
	

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Update();
]]></ST>
    </Implementation>
    <Method Name="AddTrigger" Id="{d7e83bef-d5e1-4fe8-b79a-89c8086b3844}">
      <Declaration><![CDATA[METHOD PUBLIC AddTrigger
VAR_INPUT
	fbEvent : POINTER TO FB_EventTrigger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
aFaultsToCheck[nWriteIndex]:=fbEvent;
nWriteIndex := nWriteIndex +1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetActiveEventCount" Id="{cd32fd0b-e511-4ff1-8c9d-ef12759e2e01}">
      <Declaration><![CDATA[METHOD GetActiveEventCount : UINT
VAR
	nActiveEventCount:UINT:=0;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//FOR nIdx := LOWER_BOUND(aFaultsToCheck,1) TO UPPER_BOUND(aFaultsToCheck,1) DO

FOR nIdx := 0 TO nWriteIndex-1 DO
	IF(aFaultsToCheck[nIdx]^.Active())THEN
		nActiveEventCount:=nActiveEventCount+1;
	END_IF
END_FOR;
GetActiveEventCount:=nActiveEventCount;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetEvent" Id="{7d4429fc-a8de-4380-96e4-6836fca535d8}">
      <Declaration><![CDATA[METHOD PUBLIC GetEvent : Pointer to FB_EventTrigger
VAR_INPUT
	nIndex:UINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nIndex >=0 AND nIndex <nWriteIndex THEN
	GetEvent:= aFaultsToCheck[nIndex];
ELSE
	//TODO-NIKO error gracefully
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetFirstActiveEvent" Id="{a193127a-8663-4ec2-a895-c7ca5ea2f347}">
      <Declaration><![CDATA[METHOD PUBLIC GetFirstActiveEvent : Pointer TO FB_EventTrigger
VAR_INPUT
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[//FOR nIdx := LOWER_BOUND(aFaultsToCheck,1) TO UPPER_BOUND(aFaultsToCheck,1) DO

FOR nIdx := 0 TO nWriteIndex-1 DO
	IF(aFaultsToCheck[nIdx]^.Active()) THEN
		GetFirstActiveEvent:=aFaultsToCheck[nIdx];
		EXIT;
	END_IF
END_FOR;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetTotalEventCount" Id="{c86f9100-53dd-44f6-9da2-c006f769a868}">
      <Declaration><![CDATA[METHOD GetTotalEventCount : UINT
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetTotalEventCount:=nWriteIndex;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Update" Id="{77153843-7fab-471e-a582-94d53dbc830e}">
      <Declaration><![CDATA[METHOD Update
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//FOR nIdx := LOWER_BOUND(aFaultsToCheck,1) TO UPPER_BOUND(aFaultsToCheck,1) DO


FOR nIdx := 0 TO nWriteIndex-1 DO
(*	ADSLOGSTR(
	msgCtrlMask := ADSLOG_MSGTYPE_HINT, 
	msgFmtStr   := 'IndexWas %s', 
	strArg      := TO_STRING(nIDX)
	//TODO-NIKO DELETE DEBUG CODE COMMENT
	
);  *)
aFaultsToCheck[nIdx]^.Update();
END_FOR;
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>