<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4026.13">
  <POU Name="FB_EventTrigger" Id="{c2ca63a9-7bc3-4cc8-b616-f70b88c447a4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_EventTrigger
VAR_INPUT
	
END_VAR
VAR_OUTPUT
END_VAR
VAR
	bTriggered:BOOL;
	
	aTriggerData : ARRAY [0..1000] OF TriggerData ;
	aTriggerSettings : ARRAY [0..1000] OF TriggerSettings ;
	myClass : GUID;
	fbTcMessage		: FB_TcMessage;
	fbSource		: FB_TcSourceInfo;
	
	//selfSource: FB_TcSourceInfo;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Configure" Id="{9c0fec47-f6ea-4551-8cc3-641fce0cb94c}">
      <Declaration><![CDATA[METHOD PUBLIC Configure
VAR_INPUT
	nEventID : UDINT;
	stTriggerSettings : TriggerSettings;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[aTriggerSettings[nEventID]:=stTriggerSettings;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{c2ac4f44-1013-4aa6-8737-fa7910229efa}">
      <Declaration><![CDATA[//FB_Init is always available implicitly and it is used primarily for initialization.
//The return value is not evaluated. For a specific influence, you can also declare the
//methods explicitly and provide additional code there with the standard initialization
//code. You can evaluate the return value.
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)   
	eventClass : GUID;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[myClass:=eventClass;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetState" Id="{122cb1d5-f9ea-4146-9220-7285b4e36f3b}">
      <Declaration><![CDATA[METHOD PUBLIC GetState : BOOL
VAR_INPUT
	nEventID : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetState:=aTriggerData[nEventID].bTriggered;]]></ST>
      </Implementation>
    </Method>
    <Method Name="placeholder" Id="{7eee2762-7014-43aa-953c-c28623414831}">
      <Declaration><![CDATA[METHOD PUBLIC placeholder
VAR_INPUT
		nEventEntry: TcEventEntry;
	nEventID: UDINT:=0;

	bTrigger: BOOL;
	sSource: STRING :=__POUNAME();
	nI : INT :=0;
	nJ : INT :=0;
	sK : STRING :='';
	eSeverity :TcEventSeverity:=TcEventSeverity.Verbose;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{f203afe3-8938-4df8-aa45-47f3a6a59c6b}">
      <Declaration><![CDATA[METHOD PUBLIC Reset
VAR_INPUT
	nEventID : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[aTriggerData[nEventID].bTriggered:=FALSE;
aTriggerData[nEventID].nActivationCount:=0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Trigger" Id="{e2976bb1-b6a1-4521-a2a6-9b55a100387f}">
      <Declaration><![CDATA[METHOD PUBLIC Trigger
VAR_INPUT
	nEventID: UDINT;
	bTrigger: BOOL;
	sSource: STRING :=__POUNAME();
	arg1 : STRING :='';
	arg2 : STRING :='';
	arg3 : STRING :='';
	eSeverity :TcEventSeverity:=TcEventSeverity.Verbose;
END_VAR
VAR
	string1 :STRING;
string2 :STRING;
string3:STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fbSource.sName:=sSource;
string1:=TO_STRING(arg1);
string2:=TO_STRING(arg2);
string3:=TO_STRING(arg3);


IF aTriggerSettings[nEventID].tDebounceTime > T#0MS THEN
	aTriggerData[nEventID].timerDebounceTimer(IN:= bTrigger, PT := aTriggerSettings[nEventID].tDebounceTime);
	aTriggerData[nEventID].GetEventTrigger(CLK:=aTriggerData[nEventID].timerDebounceTimer.Q);
ELSE
	aTriggerData[nEventID].GetEventTrigger(CLK:=bTrigger);
END_IF

IF aTriggerData[nEventID].GetEventTrigger.Q THEN
	aTriggerData[nEventID].nActivationCount := aTriggerData[nEventID].nActivationCount +1;
END_IF



IF(aTriggerData[nEventID].nActivationCount >= aTriggerSettings[nEventID].nActivationThreshold) THEN
	aTriggerData[nEventID].bTriggered :=TRUE;
ELSE	
	aTriggerData[nEventID].bTriggered:=FALSE;
END_IF

IF aTriggerSettings[nEventID].bAutoResetCount AND bTrigger = FALSE THEN
	aTriggerData[nEventID].nActivationCount :=0;
END_IF




aTriggerData[nEventID].SendEventTrigger(CLK:=aTriggerData[nEventID].bTriggered);

IF aTriggerData[nEventID].SendEventTrigger.Q THEN
	IF(aTriggerSettings[nEventID].eEventType = E_EventType.Message) THEN
		fbTcMessage.Create(eventClass:=myClass, nEventID:= TO_UDINT(nEventID), eSeverity:=eSeverity ,ipSourceInfo:=fbSource);
		fbTcMessage.ipArguments.Clear();
		fbTcMessage.ipArguments.AddUDInt(TO_UDINT(nEventID));
		fbTcMessage.ipArguments.AddString(string1);
		fbTcMessage.ipArguments.AddString(string2);
		fbTcMessage.ipArguments.AddString(string3);
		fbTcMessage.Send(0);
	
	ELSE
		fbTcMessage.Create(eventClass:=TC_EVENT_CLASSES.TestEventClass, nEventID:= TO_UDINT(nEventID), eSeverity:=eSeverity ,ipSourceInfo:=fbSource);
		fbTcMessage.ipArguments.Clear();
		fbTcMessage.ipArguments.AddUDInt(TO_UDINT(nEventID));
		fbTcMessage.ipArguments.AddString(string1);
		fbTcMessage.ipArguments.AddString(string2);
		fbTcMessage.ipArguments.AddString(string3);
		fbTcMessage.Send(0);
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TriggerEvent" Id="{16ba81cb-a13e-48f5-95ba-0aa66f291352}">
      <Declaration><![CDATA[METHOD PUBLIC TriggerEvent//A wrapper provided for convience. Only differs From Trigger in the data type. 
VAR_INPUT
	nEventEntry: TcEventEntry;
	bTrigger: BOOL;
	sSource: STRING :=__POUNAME();
	arg1 : STRING :='';
	arg2 : STRING :='';
	arg3 : STRING :='';
	eSeverity :TcEventSeverity:=TcEventSeverity.Verbose;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Trigger(nEventID:=nEventEntry.nEventId,bTrigger,sSource,arg1,arg2,arg3,eSeverity);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>